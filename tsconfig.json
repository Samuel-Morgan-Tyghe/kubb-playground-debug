{
  "compilerOptions": {
    "types": ["vite/client", "vitest/globals", "@testing-library/jest-dom"],
    "baseUrl": "src",
    "paths": {
      "@configs/*": ["configs/*"],
      "@assets/*": ["assets/*"],
      "@components/*": ["components/*"],
      "@constants/*": ["constants/*"],
      "@context/*": ["context/*"],
      "@data/*": ["data/*"],
      "@advisor/*": ["advisor/*"],
      "@features/*": ["features/*"],
      "@hooks/*": ["hooks/*"],
      "@lib/*": ["lib/*"],
      "@models/*": ["models/*"],
      "@mocks/*": ["mocks/*"],
      "@routes/*": ["routes/*"],
      "@services/*": ["services/*"],
      "@scenes/*": ["scenes/*"],
      "@shared/*": ["shared/*"],
      "@gen/*": ["gen/*"],
      "@utils/*": ["utils/*"]
    },
    "target": "esnext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "outDir": "./dist/",
    "sourceMap": true,
    "noImplicitAny": true,
    "removeComments": true
  },
  "outDir": "./dist/",
  "include": [
    "src/**/*",
    "custom.d.ts",
    "index.d.ts",
    "e2e/**/*",
    ".eslintrc.js",
    "tailwind.config.ts",
    ".storybook/**/*",
    "vite.config.mts",
    "**/*/.eslintrc.js",
    "scripts/**/*",
    "kubb.config.ts"
  ],
  "exclude": [
    "public/sw.js",
    "node_modules",
    "playwright.config.ts",
    "jest.config.js",
    "package.json",
    "postcss.config.js",
    "public/mockServiceWorker.js"
  ],
  "overrides": [
    {
      "files": ["src/gen/**/*.{ts,tsx}"],
      "rules": {
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/no-explicit-any": "off", 
        "@typescript-eslint/ban-types": "off",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "enumMember", 
            "format": null 
          }
        ]
      }
    }
  ]
}
